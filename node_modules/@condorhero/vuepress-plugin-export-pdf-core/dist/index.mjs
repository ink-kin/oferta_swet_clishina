export { afterParse, beforeParse, runCli } from './runner.mjs';
export { c as convertPathToPosix, f as filterRoute, g as generatePdf, m as mergePDF } from './shared/vuepress-plugin-export-pdf-core.ebd48e08.mjs';
import process from 'node:process';
import semver from 'semver';
import { resolve } from 'node:path';
import fse from 'fs-extra';
import pc from 'picocolors';
import { bundleRequire } from 'bundle-require';
export { systemInfo } from './systemInfo.mjs';
import 'cac';
import 'html-export-pdf-cli';
import 'node:os';
import 'multimatch';
import '@condorhero/merge-pdfs';
import 'pdfjs';
import 'envinfo';
import 'ora';

const options = {
  year: "numeric",
  month: "2-digit",
  day: "2-digit",
  hour: "2-digit",
  minute: "2-digit",
  second: "2-digit",
  hour12: false
};
function timeTransformer(timestamp = /* @__PURE__ */ new Date(), lang = "zh-CN", dateOptions = options) {
  return new Date(timestamp).toLocaleString(lang, dateOptions).replaceAll(/(\/|\:|)/g, "").replace(/\s/, "-");
}

function checkEnv(appName, nodeVersion, appVersion, peerVersion) {
  if (!semver.satisfies(process.version, nodeVersion, { includePrerelease: true })) {
    console.error(
      `
[${appName}] minimum Node version not met:
You are using Node ${process.version}, but ${appName} requires Node ${nodeVersion}.
Please upgrade your Node version.
`
    );
    process.exit(1);
  }
  if (!semver.satisfies(appVersion, peerVersion, { includePrerelease: true })) {
    console.error(
      `
[${appName}] version not met:
You are using ${appName} ${appVersion}, but plugin requires ${peerVersion}.
Please check it.
`
    );
    process.exit(1);
  }
}

function resolveUserConfigConventionalPath(source, configName = "vuepress", cwd = process.cwd()) {
  return [
    resolve(cwd, `${configName}-pdf.config.ts`),
    resolve(cwd, `${configName}-pdf.config.js`),
    resolve(cwd, `${configName}-pdf.config.cjs`),
    resolve(cwd, `${configName}-pdf.config.mjs`),
    resolve(source, `.${configName}/${configName}-pdf.config.ts`),
    resolve(source, `.${configName}/${configName}-pdf.config.js`),
    resolve(source, `.${configName}/${configName}-pdf.config.cjs`),
    resolve(source, `.${configName}/${configName}-pdf.config.mjs`)
  ].find((item) => fse.pathExistsSync(item));
}

function resolveUserConfigPath(userConfigPath, cwd = process.cwd()) {
  const configPath = resolve(cwd, userConfigPath);
  if (!fse.pathExistsSync(configPath)) {
    throw console.error(
      `config file does not exist: ${pc.magenta(userConfigPath)}`
    );
  }
  return configPath;
}

async function loadModule(configPath) {
  const { mod } = await bundleRequire({
    filepath: configPath
  });
  return mod.default || mod;
}

export { checkEnv, loadModule, resolveUserConfigConventionalPath, resolveUserConfigPath, timeTransformer };
