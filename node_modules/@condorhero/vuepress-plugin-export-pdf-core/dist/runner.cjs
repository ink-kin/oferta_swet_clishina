'use strict';

const process = require('node:process');
const cac = require('cac');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const process__default = /*#__PURE__*/_interopDefaultCompat(process);
const cac__default = /*#__PURE__*/_interopDefaultCompat(cac);

const name = "@condorhero/vuepress-plugin-export-pdf-core";
const type = "module";
const version = "3.0.3";
const description = "The Core of VuePress and VitePress exports PDF plugin";
const author = "CondorHero";
const license = "MIT";
const homepage = "https://github.com/condorheroblog/vuepress-plugin-export-pdf#readme";
const repository = {
	type: "git",
	url: "git+https://github.com/condorheroblog/vuepress-plugin-export-pdf.git",
	directory: "packages/vuepress-plugin-export-pdf-core"
};
const bugs = {
	url: "https://github.com/condorheroblog/vuepress-plugin-export-pdf/issues"
};
const keywords = [
	"vuepress-plugin-export-pdf",
	"vuepress-plugin",
	"vuepress",
	"plugin"
];
const exports$1 = {
	".": {
		"import": "./dist/index.mjs",
		require: "./dist/index.cjs"
	}
};
const main = "dist/index.cjs";
const module$1 = "dist/index.mjs";
const types = "dist/index.d.ts";
const typesVersions = {
	"*": {
		"*": [
			"./dist/*",
			"./dist/index.d.ts"
		]
	}
};
const files = [
	"dist"
];
const engines = {
	node: ">=8.6"
};
const scripts = {
	build: "unbuild",
	prepublishOnly: "nr build",
	dev: "esno ./src/index.ts"
};
const dependencies = {
	"@condorhero/merge-pdfs": "^0.0.7",
	"bundle-require": "^4.1.0",
	cac: "^6.7.14",
	envinfo: "^7.13.0",
	"fs-extra": "^11.2.0",
	"html-export-pdf-cli": "^1.1.5",
	multimatch: "^7.0.0",
	ora: "^8.0.1",
	pdfjs: "^2.5.3",
	picocolors: "^1.0.0",
	semver: "^7.6.2"
};
const devDependencies = {
	"@types/envinfo": "^7.8.3",
	"@types/fs-extra": "^11.0.4",
	"@types/semver": "^7.5.8"
};
const publishConfig = {
	access: "public",
	registry: "https://registry.npmjs.org"
};
const pkg = {
	name: name,
	type: type,
	version: version,
	description: description,
	author: author,
	license: license,
	homepage: homepage,
	repository: repository,
	bugs: bugs,
	keywords: keywords,
	exports: exports$1,
	main: main,
	module: module$1,
	types: types,
	typesVersions: typesVersions,
	files: files,
	engines: engines,
	scripts: scripts,
	dependencies: dependencies,
	devDependencies: devDependencies,
	publishConfig: publishConfig
};

function beforeParse(cliInstance) {
  cliInstance.version(pkg.version).help();
}
function afterParse(cliInstance) {
  if (!process__default.argv.slice(2).filter(Boolean).length)
    cliInstance.outputHelp();
}
function runCli(programName) {
  try {
    const program = cac__default(programName);
    return (registerCommands) => {
      registerCommands(program);
      beforeParse(program);
      program.parse(process__default.argv);
      afterParse(program);
    };
  } catch (error) {
    process__default.exit(1);
  }
}

exports.afterParse = afterParse;
exports.beforeParse = beforeParse;
exports.runCli = runCli;
