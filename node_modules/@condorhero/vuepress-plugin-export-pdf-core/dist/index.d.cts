import { Page } from './types.cjs';
export { CommandOptions } from './types.cjs';
export { afterParse, beforeParse, runCli } from './runner.cjs';
export { GeneratePdfOptions, UserSorter, generatePdf } from './generatePdf.cjs';
export { systemInfo } from './systemInfo.cjs';
export { Browser, LaunchOptions, PDFOptions } from 'html-export-pdf-cli';
export { CAC } from 'cac';

/**
 * Converts a file path to a POSIX-style path.
 * On Windows, it replaces DOS device paths and converts backslashes to forward slashes.
 * @param {string} path - The file path to convert.
 * @returns {string} The converted POSIX-style path.
 * @see https://github.com/mrmlnc/fast-glob/blob/28a3d61e44d5d9193ba97de4f21df6dc7725f7c0/src/utils/path.ts
 */
declare function convertPathToPosix(path: string): string;

/**
 * get current time in format: YYYY-MM-DD-HH-mm-ss
 * @param timestamp - Timestamp
 * @param lang - Language
 * @param dateOptions - Date options
 * @returns - Date string
 */
declare function timeTransformer(timestamp?: Date, lang?: string, dateOptions?: Intl.DateTimeFormatOptions): string;

/**
 * Filter route by a list of glob patterns.
 * @param pages - List of pages.
 * @param routePatterns - List of glob patterns.
 * @returns - List of pages that match the glob patterns.
 */
declare function filterRoute(pages: Page[], routePatterns: string[]): Page[];

/**
 * Ensure that current Node version matches App's Node version and App's version matches peerVersion
 *
 * @param {string} appName - App's name.
 * @param {string} nodeVersion - The minimum required version of Node.
 * @param {string} appVersion - The version number of App.
 * @param {string} peerVersion - The required version number of the plugin.
 * @returns {void}
 * @throws {Error} If the environment does not meet the minimum requirements.
 */
declare function checkEnv(appName: string, nodeVersion: string, appVersion: string, peerVersion: string): void;

interface NormalizePage {
    location: string;
    pagePath: string;
    url: string;
    title?: string;
}
/**
 * Merge PDFs.
 * @param pages - NormalizePage
 * @param outFile - Output file
 * @param outDir - Output directory
 * @returns relativePath - Output relative path
 */
declare function mergePDF(pages: NormalizePage[], outFile: string, outDir: string, pdfOutlines?: boolean): Promise<string>;

/**
 * Resolve conventional user config file path
 */
declare function resolveUserConfigConventionalPath(source: string, configName?: string, cwd?: string): string | undefined;

/**
 * Resolve file path of user config
 */
declare function resolveUserConfigPath(userConfigPath: string, cwd?: string): string;

/**
 * loadModule is a function that loads the user config.
 * @param configPath path to user config file
 * @returns config - UserConfig
 */
declare function loadModule<T>(configPath: string): Promise<T>;

export { type NormalizePage, Page, checkEnv, convertPathToPosix, filterRoute, loadModule, mergePDF, resolveUserConfigConventionalPath, resolveUserConfigPath, timeTransformer };
